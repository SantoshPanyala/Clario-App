import jsPDF from 'jspdf';

export function generateReportPDF(reportData) {
    // Create new PDF document
    const pdf = new jsPDF();
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    let yPosition = 20;

    // Helper function to add text with word wrap
    const addText = (text, fontSize = 12, isBold = false, color = [0, 0, 0]) => {
        pdf.setFontSize(fontSize);
        pdf.setFont('helvetica', isBold ? 'bold' : 'normal');
        pdf.setTextColor(color[0], color[1], color[2]);
        
        const lines = pdf.splitTextToSize(text, pageWidth - 40);
        pdf.text(lines, 20, yPosition);
        yPosition += lines.length * (fontSize * 0.4) + 5;
    };

    // Helper function to check if we need a new page
    const checkNewPage = () => {
        if (yPosition > pageHeight - 30) {
            pdf.addPage();
            yPosition = 20;
            return true;
        }
        return false;
    };

    // Header
    addText('Clario.app - Conversion Report', 20, true, [0, 0, 0]);
    addText('AI-Powered Landing Page Analysis', 14, false, [100, 100, 100]);
    addText(`Generated on: ${new Date().toLocaleDateString()}`, 10, false, [150, 150, 150]);
    
    yPosition += 10;

    // Overall Performance Section
    addText('Overall Conversion Performance', 16, true, [0, 0, 0]);
    addText(`Score: ${reportData.conversionPerformance}`, 14, true, [255, 193, 7]); // Yellow color
    
    // Create a simple progress bar representation
    const [score, total] = reportData.conversionPerformance.split('/').map(Number);
    const percentage = (score / total) * 100;
    addText(`Performance: ${percentage}%`, 12, false, [100, 100, 100]);
    
    yPosition += 10;

    // Page Strengths Section
    addText('Page Strengths', 16, true, [0, 0, 0]);
    reportData.pageStrengths.forEach((strength, index) => {
        addText(`â€¢ ${strength}`, 12, false, [0, 150, 0]); // Green color
    });
    
    yPosition += 10;

    // Improvement Hypotheses Section
    addText('Improvement Hypotheses', 16, true, [0, 0, 0]);
    
    reportData.croHypotheses.forEach((hypothesis, index) => {
        checkNewPage();
        
        // Hypothesis title
        addText(`${index + 1}. ${hypothesis.title}`, 14, true, [0, 0, 0]);
        
        // Category and impact
        addText(`Category: ${hypothesis.category}`, 10, false, [100, 100, 100]);
        addText(`Projected Impact: ${hypothesis.projectedImpact}`, 10, true, [255, 193, 7]);
        
        // Suggestions
        addText('Recommendations:', 12, true, [0, 0, 0]);
        hypothesis.suggestions.forEach((suggestion, sIndex) => {
            addText(`${suggestion.type}:`, 11, true, [0, 0, 0]);
            addText(`  ${suggestion.proposed}`, 10, false, [50, 50, 50]);
        });
        
        yPosition += 10;
    });

    // Footer
    checkNewPage();
    yPosition = pageHeight - 20;
    addText('Generated by Clario.app - AI-Powered Conversion Optimization', 10, false, [150, 150, 150]);

    return pdf;
}

export function downloadReportPDF(reportData, filename = null) {
    const pdf = generateReportPDF(reportData);
    const defaultFilename = `clario-report-${new Date().toISOString().split('T')[0]}.pdf`;
    pdf.save(filename || defaultFilename);
}
